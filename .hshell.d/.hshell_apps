#!/bin/bash
# $HOME/.shell.d/.shell_apps

#aircrack-ng 
WIFIMon() { sudo airmon-ng check kill; sudo airmon-ng start $1; export WifiInt=$1"mon"; }
WIFIMonStop() { sudo airmon-ng stop $WifiInt; sleep 2; sudo service NetworkManager restart; }
WIFIList() { sudo airodump-ng -M -U -W $WifiInt; }
WIFICap() { export WifiBSSID=$1 && export WifiChan=$2; sudo airodump-ng -c $WifiChan --bssid $WifiBSSID -w capture $WifiInt --output-format pcap; }
WIFIDeauth() { export WifiBSSID=$1 && export WifiChan=$2; sudo aireplay-ng -0 10 -a $WifiBSSID $WifiInt; }
WIFICd() {  sudo aireplay-ng -0 99 -a $WifiBSSID $WifiInt &> /dev/null ; }
WIFIConv() { CapFile=$1; aircrack-ng -j $CapFile $CapFile; }
WIFICrack() { HccapxFile=$1 WordlistFile=$2 ; sudo hashcat -m 2500 $HccapxFile $WordlistFile; }
#cewl
CewlCrawl() { TargetUrl=$1 && WordlistFile=$( echo $1 | cut -d "/" -f3 )".txt"; sudo cewl -w $WordlistFile -d 3 -o -m 8 --lowercase --convert-umlauts -v $1; }
#virtualbox
VMLIST() { sudo VBoxManage list vms; }
VMREG() { curdir=$( pwd ); abspath=( $curdir"/"$1 ); sudo VBoxManage registervm "$abspath"; }
VMUNREG() { sudo VBoxManage unregistervm $1; }
VMLISTON() { sudo VBoxManage list runningvms; }
VMPWR() { sudo VBoxManage controlvm $1 $2; }
VMSTART() { sudo VBoxManage startvm $1 --type headless; }
VMSAVESLEEP() { sudo VBoxManage controlvm $1 savestate; }
VMSLEEPALL() { sudo VBoxManage list runningvms | while read line; do sudo VBoxManage controlvm "$(expr match "$line" '"\(.*\)"')" savestate; done; }
VMOVAEXPORT() { sudo VBoxManage export $1 -o $2; }
VMCREATE() { disk="$1"; sudo VBoxManage internalcommands createrawvmdk -filename "$disk.vmdk" -rawdisk /dev/"$disk"; }
VMCREATEPART() { disk="$1" && part="$2"; sudo VBoxManage internalcommands createrawvmdk -filename "mount.vmdk" -rawdisk /dev/"$disk" -partitions $part; }
#docker
DockerStop() { containername=$1; containerid=$(sudo docker ps | grep $containername | cut -d " " -f 1); sudo docker stop $containerid; }
#zydra
zydraDict() { sudo python3 /opt/Zydra/Zydra.py -f $1 -d $2; }
zydraBrute() { sudo python3 /opt/Zydra/Zydra.py -f $1 -b $2 -m $3 -x $4; }
#trackerjacker
TRKJKR-MakeMap() { netad=$1; sudo trackerjacker -i $netad --map; }
TRKJKR-ParseMap() { map_path=$1; parsed_path=$2; echo "Parsing TRACKERJACKER map yml file $map_path"; python /opt/trackerjackerParseMap/parse_wifi_map.py $map_path > $parsed_path; echo "Output saved to $parsed_path"; }
#dmitry
DMITRY() { dmitry -winsepf "$1"; }
## url2pdf, broken
Html2Pdf() { urlAddress="$1"; pageTitle=$( wget -qO- $urlAddress |   perl -l -0777 -ne 'print $1 if /<title.*?>\s*(.*?)\s*<\/title/si' ); pageTitle="${pageTitle// /_}"; pageTitle="${pageTitle////_}"; if [ "$pageTitle" == "" ]; then pageTitle=$( echo $urlAddress | cut -d '/' -f 3-4 | sed 's/[^a-zA-Z0-9]/_/g' | cut -c -64); fi; echo "Grabbing URL: $qrurladdress"; echo "Page title: $pageTitle"; wkhtmltopdf --background --images --enable-javascript "$urlAddress" "$pageTitle".pdf; echo "html2pdf SUCCESS"; }
Href2Url() { awk -F'HREF="|"  |">|</' '{for(i=2;i<=NF;i=i+4) print $i,$(i+2)}' $1 | cut -d '"' -f1 | grep http; }
Urllist2Pdf() { urllist=$( Href2Url $1 ); Lines=$urllist; for Line in $Lines; do echo "--- Grabbing URL: $Line" && Html2Pdf "$Line" && pdfFilename="$pageTitle".pdf; echo "Saving as: $pdfFilename" && echo ''; done; }
#archive-dl
ARCHIVE-DL() { export concurrency=20 && sudo docker run --rm -it -v $PWD/websites:/websites hartator/wayback-machine-downloader $1 --concurrency $concurrency; }
#whisper ai transcribe
WhisperStart() { whisper --language=en --model=small "$1"; }
Ytdl-Audio() { yt-dlp -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 "$1"; }
# ytfzf
Ytfzf() { ytfzf -Dtfl --sort "$1"; }
Ytfzf-first() { ytfzf -Dtfla --sort "$1"; }
Ytfzf-subs() { ytfzf --features=subtitles --force-youtube -Dtfl --sort "$1"; }
